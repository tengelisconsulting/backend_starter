worker_processes ${WORKER_PROCS};
error_log logs/error.log ${GATEWAY_LOG_LEVEL};

events {
    worker_connections 1024;
}

env EZ_INPUT_HOST;
env EZ_INPUT_PORT;

env PGST_HOST;
env PGST_PORT;


http {
    # resolver local=on;
    limit_req_zone $binary_remote_addr zone=new_user_rate:10m rate=${NEW_USER_RATE}r/m;
    limit_req_zone $binary_remote_addr zone=login_rate:10m rate=${LOGIN_RATE}r/m;

    upstream pgst {
        least_conn;
        server ${PGST_HOST}:${PGST_PORT};
    }

    server {
        listen ${GATEWAY_PORT};
        server_name ${GATEWAY_HOST} www.${GATEWAY_HOST};
        lua_code_cache ${LUA_CODE_CACHE};

        set $user_id "";

        location /auth {
            default_type application/json;
            include controllers/auth_controller.conf;
        }
        location /work-group {
            default_type application/json;
            include controllers/work_group_controller.conf;
        }
        location /task {
            default_type application/json;
            include controllers/task_controller.conf;
        }
        location /db {
            default_type application/json;
            include util/authed.conf;
            rewrite ^/db/(.*)$ /$1 break;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_pass http://pgst;
        }
        location /open_db {
            default_type application/json;
            rewrite ^/open_db/(.*)$ /$1 break;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_pass http://pgst;
        }
        location /mail/check {
            default_type application/json;
            content_by_lua_block {
                local ez = require "lua/ez"
                local log = require "lua/log"
                local respond = require "lua/respond"
                local res, err = ez.r("MAIL_IO", "/load/new", {})
                return respond.ok(res)
            }
        }
        location /vsn {
            limit_except GET { deny all; }
            default_type application/json;
            content_by_lua_block {
                local cjson = require("cjson")
                ngx.say(cjson.encode("${GIT_REV}"))
            }
        }
    }
}
